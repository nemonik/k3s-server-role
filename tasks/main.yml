---
# tasks file for k3s-server

# Copyright (C) 2020 Michael Joseph Walsh - All Rights Reserved
# You may use, distribute and modify this code under the
# terms of the the license.
#
# You should have received a copy of the license with
# this file. If not, please email <mjwalsh@nemonik.com>

- name: initialize images fact
  set_fact:
    images:
      - { repository: 'rancher/pause', tag: '' }
      - { repository: 'coredns/coredns', tag: '' }
      - { repository: 'rancher/local-path-provisioner', tag: '' }
      - { repository: 'rancher/metrics-server', tag: '' }
  when:
    images_cache_path is defined
  tags:
    - k3s-server

- name: load {{ images }} from cache
  include_tasks: retrieve_container_image.yml
  loop: "{{ images }}"
  when:
    images_cache_path is defined
  tags:
    - k3s-server

- name: set cache_path to /tmp if not set
  set_fact:
    cache_path: /tmp
  when:
    - cache_path is not defined
  tags:
    - k3s-server

- name: ensure iptables is enabled in a manner preferable to k3s
  block:
  - name: populate service facts
    service_facts:

  - name: disable firewalld and enable iptables
    block:
    - name: ensure firewalld is not running
      become: yes
      service:
        name: firewalld
        enabled: no
        state: stopped

    - name: ensure firewalld is masked
      become: yes
      shell: systemctl mask firewalld

    - name: ensure iptables-services is installed
      become: yes
      yum:
        name: "{{ packages }}"
        disablerepo: "epel"
      retries: "{{ default_retries }}"
      delay: "{{ default_delay }}"
      register: result
      until: result is succeeded
      vars:
        packages:
          - iptables-services
          - policycoreutils-python

    - name: ensure iptables is running
      become: yes
      service:
        name: iptables
        enabled: yes
        state: started

    - name: clear iptables rules left over from firewalld
      become: yes
      shell: |
        iptables -t nat -F
        iptables -t mangle -F
        iptables -F
        iptables -X
        service iptables save

    - name: restart docker to add DOCKER chain to iptables
      become: yes
      service:
        name: docker
        state: restarted
    when:
      - ansible_facts.services['k3s.service'] is not defined

  when:
    - ansible_distribution == 'CentOS'
    - ansible_distribution_major_version == '7'
  tags:
    - k3s-server

- name: ensure packages are installed for k3s-selinux policy
  become: yes
  yum:
    name: "{{ packages }}"
    disablerepo: "epel"
    disable_gpg_check: yes
  retries: "{{ default_retries }}"
  delay: "{{ default_delay }}"
  register: result
  until: result is succeeded
  vars:
    packages:
      - container-selinux
      - selinux-policy-base
      - https://rpm.rancher.io/k3s-selinux-0.1.1-rc1.el7.noarch.rpm

  when:
    - ansible_distribution == 'CentOS'
    - ansible_distribution_major_version == '7'
  tags:
    - k3s-server

- name: get K3s service status
  become: yes
  shell: |
    var=$(rc-status -s | grep "k3s\s*\[\s*started.*")
    [[ "$(echo "$var")" != '' ]] && echo true || echo false
  register: k3s_service
  tags:
    - k3s-server

- name: determine k3s_flannel_iface of master
  block:
  - name: set interface, if Alpine
    set_fact:
      k3s_flannel_iface: 'eth1'
    when: ansible_distribution == 'Alpine' and '3.10' in ansible_distribution_version

  - name: set interface, if CentOS 7
    set_fact:
      k3s_flannel_iface: 'eth1'
    when: ansible_distribution == 'CentOS' and ansible_distribution_major_version == '7'

  - name: set interface, if Ubuntu-bionic
    set_fact:
      k3s_flannel_iface: 'enp0s8'
    when: ansible_distribution == 'Ubuntu' and ansible_distribution_release == 'bionic'

  - name: fail, if not Alpine or Ubuntu-bionic or CentOS 7
    fail:
      msg: "{{ ansible_distribution }} - {{ ansible_distribution_release }} operating system is not currently supported."
  when: k3s_flannel_iface is not defined
  tags:
    - k3s-server

- name: get ip for {{ k3s_flannel_iface }}
  block:
  - name: install iproute, if CentOs 7
    become: yes
    yum:
      name: iproute
      disable_gpg_check: yes
    retries: "{{ default_retries }}"
    delay: "{{ default_delay }}"
    register: result
    until: result is succeeded
    when:
      - ansible_distribution == 'CentOS'
      - ansible_distribution_major_version == '7'

  - name: get ip via ip command
    shell: |
      source /etc/profile
      ip addr show {{ k3s_flannel_iface }} | grep "inet " | awk '{print $2}' | cut -d / -f1
    args:
      executable: /bin/bash
    register: ipaddr
  tags:
    - k3s-server

- name: install and spin up k3s, if needed
  block:
  - name: create {{ cache_path }}/files, if it doesn't exist
    file:
      path: "{{ cache_path }}/files"
      state: directory

  - name: ensure /home/{{ ansible_user_id }}/k3s exists
    file:
      path: /home/{{ ansible_user_id }}/k3s
      state: directory

  - name: is install_k3s.sh cached?
    stat:
      path: "{{ cache_path }}/files/install_k3s.sh"
    register: k3s_distributable

  - name: cache install_k3.sh retrieved from https://raw.githubusercontent.com/rancher/k3s/master/install.sh
    shell: |
      if [[ "windows" == "{{ host_os | default('') }}" && "{{ cache_path }}" != "/tmp" ]]; then
         sudo su
      fi
      rm -f {{ cache_path }}/files/install_k3s.sh
      wget --no-check-certificate -O {{ cache_path }}/files/install_k3s.sh https://raw.githubusercontent.com/rancher/k3s/master/install.sh
    args:
      executable: /bin/bash
    retries: "{{ default_retries }}"
    delay: "{{ default_delay }}"
    register: result
    until: result is succeeded
    when:
     - not k3s_distributable.stat.exists

  - name: emplace install_k3s.sh into /home/{{ ansible_user_id }}
    copy:
      src: "{{ cache_path }}/files/install_k3s.sh"
      dest: /home/{{ ansible_user_id }}/k3s
      mode: u=rwx,g=r,o=r
      remote_src: yes

  - name: install K3s
    become: yes
#    shell: INSTALL_K3S_VERSION={{ k3s_version }} INSTALL_K3S_EXEC="--flannel-backend=host-gw --flannel-iface={{ k3s_flannel_iface }} --cluster-secret={{ vault_k3s_cluster_secret }} --docker --no-deploy=traefik --no-deploy=servicelb --no-deploy metrics-server" /home/{{ ansible_user_id }}/k3s/install_k3s.sh
    shell: INSTALL_K3S_VERSION={{ k3s_version }} INSTALL_K3S_EXEC="--flannel-backend=host-gw --flannel-iface={{ k3s_flannel_iface }} --cluster-secret={{ vault_k3s_cluster_secret }} --docker --no-deploy=traefik --no-deploy=servicelb" /home/{{ ansible_user_id }}/k3s/install_k3s.sh
    retries: "{{ default_retries }}"
    delay: "{{ default_delay }}"
    register: result
    until: result is succeeded

  - name: alias `kubectl` to `k3s kubectl`
    become: yes
    copy:
      dest: /etc/profile.d/alias_kubectl.sh
      content: |
        alias kubectl="k3s kubectl"
  when:
    k3s_service.stdout=="false"
  tags:
    - k3s-server

- name: start and enable k3s service
  become: yes
  service:
    name: k3s
    enabled: yes
    state: started
  tags:
    - k3s-server

- name: ensure {{ ansible_user_id }} can access Kubernetes
  block:
  - name: wait for /etc/rancher/k3s/k3s.yaml to exist
    wait_for:
      path: /etc/rancher/k3s/k3s.yaml
      state: present
      delay: 0
    ignore_errors: yes

  - name: ensure the {{ ansible_user_id }} user has an kubeconfig.yml file to access kubernetes
    become: yes
    copy:
      src: /etc/rancher/k3s/k3s.yaml
      dest: /home/{{ ansible_user_id }}/kubeconfig.yml
      remote_src: yes
      owner: "{{ ansible_user_id }}"
      group: "{{ ansible_user_id }}"
      mode: u=rw,g=r

  - name: ensure https://127.0.0.1:6443 is replaced with https://{{ ipaddr.stdout }}:6443 in /home/{{ ansible_user_id }}/kubeconfig.yml
    replace:
      path: /home/{{ ansible_user_id }}/kubeconfig.yml
      regexp: '^    server: https://127.0.0.1:6443'
      replace: '    server: https://{{ ipaddr.stdout }}:6443'

  - name: ensure /home/{{ ansible_user_id }}/.bash_profile exists
    copy:
      content: ""
      dest: /home/{{ ansible_user_id }}/.bash_profile
      force: no

  - name: ensure KUBECONFIG is removed from {{ ansible_user_id }}'s bash_profile
    lineinfile:
      dest: /home/{{ ansible_user_id }}/.bash_profile
      regexp: '^export KUBECONFIG'
      state: absent

  - name: ensure KUBECONFIG is in {{ ansible_user_id }}'s bash_profile
    lineinfile:
      dest:  /home/{{ ansible_user_id }}/.bash_profile
      line: 'export KUBECONFIG="/home/{{ ansible_user_id }}/kubeconfig.yml"'
      insertafter: EOF
  tags:
    - k3s-server

- name: save {{ images }} to cache
  include_tasks: cache_container_image.yml
  loop: "{{ images }}"
  when:
    images_cache_path is defined
  tags:
    - k3s-server
